// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Deposit is the `deposit` instruction.
type Deposit struct {
	LpTokenAmountOut *uint64
	MaxBaseAmountIn  *uint64
	MaxQuoteAmountIn *uint64

	// [0] = [WRITE] pool
	//
	// [1] = [] global_config
	//
	// [2] = [SIGNER] user
	//
	// [3] = [] base_mint
	//
	// [4] = [] quote_mint
	//
	// [5] = [WRITE] lp_mint
	//
	// [6] = [WRITE] user_base_token_account
	//
	// [7] = [WRITE] user_quote_token_account
	//
	// [8] = [WRITE] user_pool_token_account
	//
	// [9] = [WRITE] pool_base_token_account
	//
	// [10] = [WRITE] pool_quote_token_account
	//
	// [11] = [] token_program
	//
	// [12] = [] token_2022_program
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `Deposit` instruction builder.
func NewDepositInstructionBuilder() *Deposit {
	nd := &Deposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Addresses["TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"])
	return nd
}

// SetLpTokenAmountOut sets the "lp_token_amount_out" parameter.
func (inst *Deposit) SetLpTokenAmountOut(lp_token_amount_out uint64) *Deposit {
	inst.LpTokenAmountOut = &lp_token_amount_out
	return inst
}

// SetMaxBaseAmountIn sets the "max_base_amount_in" parameter.
func (inst *Deposit) SetMaxBaseAmountIn(max_base_amount_in uint64) *Deposit {
	inst.MaxBaseAmountIn = &max_base_amount_in
	return inst
}

// SetMaxQuoteAmountIn sets the "max_quote_amount_in" parameter.
func (inst *Deposit) SetMaxQuoteAmountIn(max_quote_amount_in uint64) *Deposit {
	inst.MaxQuoteAmountIn = &max_quote_amount_in
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *Deposit) SetPoolAccount(pool ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Deposit) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *Deposit) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *Deposit) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserAccount sets the "user" account.
func (inst *Deposit) SetUserAccount(user ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Deposit) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *Deposit) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *Deposit) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteMintAccount sets the "quote_mint" account.
func (inst *Deposit) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
func (inst *Deposit) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *Deposit) SetLpMintAccount(lpMint ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *Deposit) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserBaseTokenAccountAccount sets the "user_base_token_account" account.
func (inst *Deposit) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "user_base_token_account" account.
func (inst *Deposit) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserQuoteTokenAccountAccount sets the "user_quote_token_account" account.
func (inst *Deposit) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "user_quote_token_account" account.
func (inst *Deposit) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserPoolTokenAccountAccount sets the "user_pool_token_account" account.
func (inst *Deposit) SetUserPoolTokenAccountAccount(userPoolTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userPoolTokenAccount).WRITE()
	return inst
}

// GetUserPoolTokenAccountAccount gets the "user_pool_token_account" account.
func (inst *Deposit) GetUserPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolBaseTokenAccountAccount sets the "pool_base_token_account" account.
func (inst *Deposit) SetPoolBaseTokenAccountAccount(poolBaseTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolBaseTokenAccount).WRITE()
	return inst
}

// GetPoolBaseTokenAccountAccount gets the "pool_base_token_account" account.
func (inst *Deposit) GetPoolBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolQuoteTokenAccountAccount sets the "pool_quote_token_account" account.
func (inst *Deposit) SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolQuoteTokenAccount).WRITE()
	return inst
}

// GetPoolQuoteTokenAccountAccount gets the "pool_quote_token_account" account.
func (inst *Deposit) GetPoolQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Deposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Deposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
func (inst *Deposit) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account.
func (inst *Deposit) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Deposit) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *Deposit) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *Deposit) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *Deposit) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *Deposit) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *Deposit) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Deposit) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *Deposit) SetProgramAccount(program ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Deposit) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst Deposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Deposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Deposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Deposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LpTokenAmountOut == nil {
			return errors.New("LpTokenAmountOut parameter is not set")
		}
		if inst.MaxBaseAmountIn == nil {
			return errors.New("MaxBaseAmountIn parameter is not set")
		}
		if inst.MaxQuoteAmountIn == nil {
			return errors.New("MaxQuoteAmountIn parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserPoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Deposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Deposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   LpTokenAmountOut", *inst.LpTokenAmountOut))
						paramsBranch.Child(ag_format.Param("    MaxBaseAmountIn", *inst.MaxBaseAmountIn))
						paramsBranch.Child(ag_format.Param("   MaxQuoteAmountIn", *inst.MaxQuoteAmountIn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              user", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         base_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        quote_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           lp_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  user_base_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" user_quote_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  user_pool_token_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  pool_base_token_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" pool_quote_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("token_2022_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpTokenAmountOut` param:
	err = encoder.Encode(obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseAmountIn` param:
	err = encoder.Encode(obj.MaxBaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteAmountIn` param:
	err = encoder.Encode(obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpTokenAmountOut`:
	err = decoder.Decode(&obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseAmountIn`:
	err = decoder.Decode(&obj.MaxBaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteAmountIn`:
	err = decoder.Decode(&obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	lp_token_amount_out uint64,
	max_base_amount_in uint64,
	max_quote_amount_in uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	userPoolTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetLpTokenAmountOut(lp_token_amount_out).
		SetMaxBaseAmountIn(max_base_amount_in).
		SetMaxQuoteAmountIn(max_quote_amount_in).
		SetPoolAccount(pool).
		SetGlobalConfigAccount(globalConfig).
		SetUserAccount(user).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetLpMintAccount(lpMint).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetUserPoolTokenAccountAccount(userPoolTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetToken2022ProgramAccount(token2022Program).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
