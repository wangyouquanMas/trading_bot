// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateFeeConfig is the `update_fee_config` instruction.
type UpdateFeeConfig struct {
	LpFeeBasisPoints       *uint64
	ProtocolFeeBasisPoints *uint64
	ProtocolFeeRecipients  *[8]ag_solanago.PublicKey

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE] global_config
	//
	// [2] = [] event_authority
	//
	// [3] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateFeeConfigInstructionBuilder creates a new `UpdateFeeConfig` instruction builder.
func NewUpdateFeeConfigInstructionBuilder() *UpdateFeeConfig {
	nd := &UpdateFeeConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetLpFeeBasisPoints sets the "lp_fee_basis_points" parameter.
func (inst *UpdateFeeConfig) SetLpFeeBasisPoints(lp_fee_basis_points uint64) *UpdateFeeConfig {
	inst.LpFeeBasisPoints = &lp_fee_basis_points
	return inst
}

// SetProtocolFeeBasisPoints sets the "protocol_fee_basis_points" parameter.
func (inst *UpdateFeeConfig) SetProtocolFeeBasisPoints(protocol_fee_basis_points uint64) *UpdateFeeConfig {
	inst.ProtocolFeeBasisPoints = &protocol_fee_basis_points
	return inst
}

// SetProtocolFeeRecipients sets the "protocol_fee_recipients" parameter.
func (inst *UpdateFeeConfig) SetProtocolFeeRecipients(protocol_fee_recipients [8]ag_solanago.PublicKey) *UpdateFeeConfig {
	inst.ProtocolFeeRecipients = &protocol_fee_recipients
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateFeeConfig) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateFeeConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateFeeConfig) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *UpdateFeeConfig) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *UpdateFeeConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig).WRITE()
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *UpdateFeeConfig) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *UpdateFeeConfig) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdateFeeConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *UpdateFeeConfig) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *UpdateFeeConfig) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *UpdateFeeConfig) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *UpdateFeeConfig) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *UpdateFeeConfig) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *UpdateFeeConfig) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateFeeConfig) SetProgramAccount(program ag_solanago.PublicKey) *UpdateFeeConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateFeeConfig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateFeeConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateFeeConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateFeeConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateFeeConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LpFeeBasisPoints == nil {
			return errors.New("LpFeeBasisPoints parameter is not set")
		}
		if inst.ProtocolFeeBasisPoints == nil {
			return errors.New("ProtocolFeeBasisPoints parameter is not set")
		}
		if inst.ProtocolFeeRecipients == nil {
			return errors.New("ProtocolFeeRecipients parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdateFeeConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateFeeConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("         LpFeeBasisPoints", *inst.LpFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("   ProtocolFeeBasisPoints", *inst.ProtocolFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("    ProtocolFeeRecipients", *inst.ProtocolFeeRecipients))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipients` param:
	err = encoder.Encode(obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipients`:
	err = decoder.Decode(&obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateFeeConfigInstruction declares a new UpdateFeeConfig instruction with the provided parameters and accounts.
func NewUpdateFeeConfigInstruction(
	// Parameters:
	lp_fee_basis_points uint64,
	protocol_fee_basis_points uint64,
	protocol_fee_recipients [8]ag_solanago.PublicKey,
	// Accounts:
	admin ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *UpdateFeeConfig {
	return NewUpdateFeeConfigInstructionBuilder().
		SetLpFeeBasisPoints(lp_fee_basis_points).
		SetProtocolFeeBasisPoints(protocol_fee_basis_points).
		SetProtocolFeeRecipients(protocol_fee_recipients).
		SetAdminAccount(admin).
		SetGlobalConfigAccount(globalConfig).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
