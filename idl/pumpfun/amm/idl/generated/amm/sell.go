// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sell is the `sell` instruction.
type Sell struct {
	BaseAmountIn      *uint64
	MinQuoteAmountOut *uint64

	// [0] = [] pool
	//
	// [1] = [WRITE, SIGNER] user
	//
	// [2] = [] global_config
	//
	// [3] = [] base_mint
	//
	// [4] = [] quote_mint
	//
	// [5] = [WRITE] user_base_token_account
	//
	// [6] = [WRITE] user_quote_token_account
	//
	// [7] = [WRITE] pool_base_token_account
	//
	// [8] = [WRITE] pool_quote_token_account
	//
	// [9] = [] protocol_fee_recipient
	//
	// [10] = [WRITE] protocol_fee_recipient_token_account
	//
	// [11] = [] base_token_program
	//
	// [12] = [] quote_token_program
	//
	// [13] = [] system_program
	//
	// [14] = [] associated_token_program
	//
	// [15] = [] event_authority
	//
	// [16] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSellInstructionBuilder creates a new `Sell` instruction builder.
func NewSellInstructionBuilder() *Sell {
	nd := &Sell{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	nd.AccountMetaSlice[13] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[14] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	return nd
}

// SetBaseAmountIn sets the "base_amount_in" parameter.
func (inst *Sell) SetBaseAmountIn(base_amount_in uint64) *Sell {
	inst.BaseAmountIn = &base_amount_in
	return inst
}

// SetMinQuoteAmountOut sets the "min_quote_amount_out" parameter.
func (inst *Sell) SetMinQuoteAmountOut(min_quote_amount_out uint64) *Sell {
	inst.MinQuoteAmountOut = &min_quote_amount_out
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *Sell) SetPoolAccount(pool ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Sell) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *Sell) SetUserAccount(user ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Sell) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *Sell) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *Sell) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *Sell) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *Sell) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteMintAccount sets the "quote_mint" account.
func (inst *Sell) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
func (inst *Sell) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserBaseTokenAccountAccount sets the "user_base_token_account" account.
func (inst *Sell) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "user_base_token_account" account.
func (inst *Sell) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserQuoteTokenAccountAccount sets the "user_quote_token_account" account.
func (inst *Sell) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "user_quote_token_account" account.
func (inst *Sell) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolBaseTokenAccountAccount sets the "pool_base_token_account" account.
func (inst *Sell) SetPoolBaseTokenAccountAccount(poolBaseTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolBaseTokenAccount).WRITE()
	return inst
}

// GetPoolBaseTokenAccountAccount gets the "pool_base_token_account" account.
func (inst *Sell) GetPoolBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolQuoteTokenAccountAccount sets the "pool_quote_token_account" account.
func (inst *Sell) SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolQuoteTokenAccount).WRITE()
	return inst
}

// GetPoolQuoteTokenAccountAccount gets the "pool_quote_token_account" account.
func (inst *Sell) GetPoolQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProtocolFeeRecipientAccount sets the "protocol_fee_recipient" account.
func (inst *Sell) SetProtocolFeeRecipientAccount(protocolFeeRecipient ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(protocolFeeRecipient)
	return inst
}

// GetProtocolFeeRecipientAccount gets the "protocol_fee_recipient" account.
func (inst *Sell) GetProtocolFeeRecipientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProtocolFeeRecipientTokenAccountAccount sets the "protocol_fee_recipient_token_account" account.
func (inst *Sell) SetProtocolFeeRecipientTokenAccountAccount(protocolFeeRecipientTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(protocolFeeRecipientTokenAccount).WRITE()
	return inst
}

func (inst *Sell) findFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient ag_solanago.PublicKey, quoteTokenProgram ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: protocolFeeRecipient
	seeds = append(seeds, protocolFeeRecipient.Bytes())
	// path: quoteTokenProgram
	seeds = append(seeds, quoteTokenProgram.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindProtocolFeeRecipientTokenAccountAddressWithBumpSeed calculates ProtocolFeeRecipientTokenAccount account address with given seeds and a known bump seed.
func (inst *Sell) FindProtocolFeeRecipientTokenAccountAddressWithBumpSeed(protocolFeeRecipient ag_solanago.PublicKey, quoteTokenProgram ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient, quoteTokenProgram, quoteMint, bumpSeed)
	return
}

func (inst *Sell) MustFindProtocolFeeRecipientTokenAccountAddressWithBumpSeed(protocolFeeRecipient ag_solanago.PublicKey, quoteTokenProgram ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient, quoteTokenProgram, quoteMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindProtocolFeeRecipientTokenAccountAddress finds ProtocolFeeRecipientTokenAccount account address with given seeds.
func (inst *Sell) FindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient ag_solanago.PublicKey, quoteTokenProgram ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient, quoteTokenProgram, quoteMint, 0)
	return
}

func (inst *Sell) MustFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient ag_solanago.PublicKey, quoteTokenProgram ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindProtocolFeeRecipientTokenAccountAddress(protocolFeeRecipient, quoteTokenProgram, quoteMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetProtocolFeeRecipientTokenAccountAccount gets the "protocol_fee_recipient_token_account" account.
func (inst *Sell) GetProtocolFeeRecipientTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
func (inst *Sell) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
func (inst *Sell) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetQuoteTokenProgramAccount sets the "quote_token_program" account.
func (inst *Sell) SetQuoteTokenProgramAccount(quoteTokenProgram ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(quoteTokenProgram)
	return inst
}

// GetQuoteTokenProgramAccount gets the "quote_token_program" account.
func (inst *Sell) GetQuoteTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Sell) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Sell) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *Sell) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *Sell) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Sell) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *Sell) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *Sell) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *Sell) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *Sell) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *Sell) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Sell) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetProgramAccount sets the "program" account.
func (inst *Sell) SetProgramAccount(program ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Sell) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst Sell) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Sell,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Sell) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Sell) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseAmountIn == nil {
			return errors.New("BaseAmountIn parameter is not set")
		}
		if inst.MinQuoteAmountOut == nil {
			return errors.New("MinQuoteAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ProtocolFeeRecipient is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ProtocolFeeRecipientTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.QuoteTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Sell) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Sell")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        BaseAmountIn", *inst.BaseAmountIn))
						paramsBranch.Child(ag_format.Param("   MinQuoteAmountOut", *inst.MinQuoteAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                         user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                global_config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    base_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   quote_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             user_base_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            user_quote_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             pool_base_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            pool_quote_token_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       protocol_fee_recipient", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("protocol_fee_recipient_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("           base_token_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          quote_token_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("               system_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("     associated_token_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("              event_authority", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                      program", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj Sell) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteAmountOut` param:
	err = encoder.Encode(obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Sell) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteAmountOut`:
	err = decoder.Decode(&obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSellInstruction declares a new Sell instruction with the provided parameters and accounts.
func NewSellInstruction(
	// Parameters:
	base_amount_in uint64,
	min_quote_amount_out uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey,
	protocolFeeRecipient ag_solanago.PublicKey,
	protocolFeeRecipientTokenAccount ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *Sell {
	return NewSellInstructionBuilder().
		SetBaseAmountIn(base_amount_in).
		SetMinQuoteAmountOut(min_quote_amount_out).
		SetPoolAccount(pool).
		SetUserAccount(user).
		SetGlobalConfigAccount(globalConfig).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount).
		SetProtocolFeeRecipientAccount(protocolFeeRecipient).
		SetProtocolFeeRecipientTokenAccountAccount(protocolFeeRecipientTokenAccount).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
