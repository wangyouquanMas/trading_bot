// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BuyEvent struct {
	Timestamp                        int64
	BaseAmountOut                    uint64
	MaxQuoteAmountIn                 uint64
	UserBaseTokenReserves            uint64
	UserQuoteTokenReserves           uint64
	PoolBaseTokenReserves            uint64
	PoolQuoteTokenReserves           uint64
	QuoteAmountIn                    uint64
	LpFeeBasisPoints                 uint64
	LpFee                            uint64
	ProtocolFeeBasisPoints           uint64
	ProtocolFee                      uint64
	QuoteAmountInWithLpFee           uint64
	UserQuoteAmountIn                uint64
	Pool                             ag_solanago.PublicKey
	User                             ag_solanago.PublicKey
	UserBaseTokenAccount             ag_solanago.PublicKey
	UserQuoteTokenAccount            ag_solanago.PublicKey
	ProtocolFeeRecipient             ag_solanago.PublicKey
	ProtocolFeeRecipientTokenAccount ag_solanago.PublicKey
}

func (obj BuyEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountOut` param:
	err = encoder.Encode(obj.BaseAmountOut)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteAmountIn` param:
	err = encoder.Encode(obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenReserves` param:
	err = encoder.Encode(obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenReserves` param:
	err = encoder.Encode(obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenReserves` param:
	err = encoder.Encode(obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenReserves` param:
	err = encoder.Encode(obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountIn` param:
	err = encoder.Encode(obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `LpFee` param:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountInWithLpFee` param:
	err = encoder.Encode(obj.QuoteAmountInWithLpFee)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteAmountIn` param:
	err = encoder.Encode(obj.UserQuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenAccount` param:
	err = encoder.Encode(obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenAccount` param:
	err = encoder.Encode(obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipient` param:
	err = encoder.Encode(obj.ProtocolFeeRecipient)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipientTokenAccount` param:
	err = encoder.Encode(obj.ProtocolFeeRecipientTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BuyEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountOut`:
	err = decoder.Decode(&obj.BaseAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteAmountIn`:
	err = decoder.Decode(&obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenReserves`:
	err = decoder.Decode(&obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenReserves`:
	err = decoder.Decode(&obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenReserves`:
	err = decoder.Decode(&obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenReserves`:
	err = decoder.Decode(&obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountIn`:
	err = decoder.Decode(&obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountInWithLpFee`:
	err = decoder.Decode(&obj.QuoteAmountInWithLpFee)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteAmountIn`:
	err = decoder.Decode(&obj.UserQuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenAccount`:
	err = decoder.Decode(&obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenAccount`:
	err = decoder.Decode(&obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipient`:
	err = decoder.Decode(&obj.ProtocolFeeRecipient)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipientTokenAccount`:
	err = decoder.Decode(&obj.ProtocolFeeRecipientTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

type CreateConfigEvent struct {
	Timestamp              int64
	Admin                  ag_solanago.PublicKey
	LpFeeBasisPoints       uint64
	ProtocolFeeBasisPoints uint64
	ProtocolFeeRecipients  [8]ag_solanago.PublicKey
}

func (obj CreateConfigEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipients` param:
	err = encoder.Encode(obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateConfigEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipients`:
	err = decoder.Decode(&obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

type CreatePoolEvent struct {
	Timestamp             int64
	Index                 uint16
	Creator               ag_solanago.PublicKey
	BaseMint              ag_solanago.PublicKey
	QuoteMint             ag_solanago.PublicKey
	BaseMintDecimals      uint8
	QuoteMintDecimals     uint8
	BaseAmountIn          uint64
	QuoteAmountIn         uint64
	PoolBaseAmount        uint64
	PoolQuoteAmount       uint64
	MinimumLiquidity      uint64
	InitialLiquidity      uint64
	LpTokenAmountOut      uint64
	PoolBump              uint8
	Pool                  ag_solanago.PublicKey
	LpMint                ag_solanago.PublicKey
	UserBaseTokenAccount  ag_solanago.PublicKey
	UserQuoteTokenAccount ag_solanago.PublicKey
}

func (obj CreatePoolEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `BaseMintDecimals` param:
	err = encoder.Encode(obj.BaseMintDecimals)
	if err != nil {
		return err
	}
	// Serialize `QuoteMintDecimals` param:
	err = encoder.Encode(obj.QuoteMintDecimals)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountIn` param:
	err = encoder.Encode(obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseAmount` param:
	err = encoder.Encode(obj.PoolBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteAmount` param:
	err = encoder.Encode(obj.PoolQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumLiquidity` param:
	err = encoder.Encode(obj.MinimumLiquidity)
	if err != nil {
		return err
	}
	// Serialize `InitialLiquidity` param:
	err = encoder.Encode(obj.InitialLiquidity)
	if err != nil {
		return err
	}
	// Serialize `LpTokenAmountOut` param:
	err = encoder.Encode(obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Serialize `PoolBump` param:
	err = encoder.Encode(obj.PoolBump)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenAccount` param:
	err = encoder.Encode(obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenAccount` param:
	err = encoder.Encode(obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreatePoolEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `BaseMintDecimals`:
	err = decoder.Decode(&obj.BaseMintDecimals)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMintDecimals`:
	err = decoder.Decode(&obj.QuoteMintDecimals)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountIn`:
	err = decoder.Decode(&obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseAmount`:
	err = decoder.Decode(&obj.PoolBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteAmount`:
	err = decoder.Decode(&obj.PoolQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumLiquidity`:
	err = decoder.Decode(&obj.MinimumLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `InitialLiquidity`:
	err = decoder.Decode(&obj.InitialLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `LpTokenAmountOut`:
	err = decoder.Decode(&obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `PoolBump`:
	err = decoder.Decode(&obj.PoolBump)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenAccount`:
	err = decoder.Decode(&obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenAccount`:
	err = decoder.Decode(&obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

type DepositEvent struct {
	Timestamp              int64
	LpTokenAmountOut       uint64
	MaxBaseAmountIn        uint64
	MaxQuoteAmountIn       uint64
	UserBaseTokenReserves  uint64
	UserQuoteTokenReserves uint64
	PoolBaseTokenReserves  uint64
	PoolQuoteTokenReserves uint64
	BaseAmountIn           uint64
	QuoteAmountIn          uint64
	LpMintSupply           uint64
	Pool                   ag_solanago.PublicKey
	User                   ag_solanago.PublicKey
	UserBaseTokenAccount   ag_solanago.PublicKey
	UserQuoteTokenAccount  ag_solanago.PublicKey
	UserPoolTokenAccount   ag_solanago.PublicKey
}

func (obj DepositEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `LpTokenAmountOut` param:
	err = encoder.Encode(obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseAmountIn` param:
	err = encoder.Encode(obj.MaxBaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteAmountIn` param:
	err = encoder.Encode(obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenReserves` param:
	err = encoder.Encode(obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenReserves` param:
	err = encoder.Encode(obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenReserves` param:
	err = encoder.Encode(obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenReserves` param:
	err = encoder.Encode(obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountIn` param:
	err = encoder.Encode(obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `LpMintSupply` param:
	err = encoder.Encode(obj.LpMintSupply)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenAccount` param:
	err = encoder.Encode(obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenAccount` param:
	err = encoder.Encode(obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserPoolTokenAccount` param:
	err = encoder.Encode(obj.UserPoolTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `LpTokenAmountOut`:
	err = decoder.Decode(&obj.LpTokenAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseAmountIn`:
	err = decoder.Decode(&obj.MaxBaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteAmountIn`:
	err = decoder.Decode(&obj.MaxQuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenReserves`:
	err = decoder.Decode(&obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenReserves`:
	err = decoder.Decode(&obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenReserves`:
	err = decoder.Decode(&obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenReserves`:
	err = decoder.Decode(&obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountIn`:
	err = decoder.Decode(&obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `LpMintSupply`:
	err = decoder.Decode(&obj.LpMintSupply)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenAccount`:
	err = decoder.Decode(&obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenAccount`:
	err = decoder.Decode(&obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserPoolTokenAccount`:
	err = decoder.Decode(&obj.UserPoolTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

type DisableEvent struct {
	Timestamp         int64
	Admin             ag_solanago.PublicKey
	DisableCreatePool bool
	DisableDeposit    bool
	DisableWithdraw   bool
	DisableBuy        bool
	DisableSell       bool
}

func (obj DisableEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `DisableCreatePool` param:
	err = encoder.Encode(obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Serialize `DisableDeposit` param:
	err = encoder.Encode(obj.DisableDeposit)
	if err != nil {
		return err
	}
	// Serialize `DisableWithdraw` param:
	err = encoder.Encode(obj.DisableWithdraw)
	if err != nil {
		return err
	}
	// Serialize `DisableBuy` param:
	err = encoder.Encode(obj.DisableBuy)
	if err != nil {
		return err
	}
	// Serialize `DisableSell` param:
	err = encoder.Encode(obj.DisableSell)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DisableEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `DisableCreatePool`:
	err = decoder.Decode(&obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `DisableDeposit`:
	err = decoder.Decode(&obj.DisableDeposit)
	if err != nil {
		return err
	}
	// Deserialize `DisableWithdraw`:
	err = decoder.Decode(&obj.DisableWithdraw)
	if err != nil {
		return err
	}
	// Deserialize `DisableBuy`:
	err = decoder.Decode(&obj.DisableBuy)
	if err != nil {
		return err
	}
	// Deserialize `DisableSell`:
	err = decoder.Decode(&obj.DisableSell)
	if err != nil {
		return err
	}
	return nil
}

type ExtendAccountEvent struct {
	Timestamp   int64
	Account     ag_solanago.PublicKey
	User        ag_solanago.PublicKey
	CurrentSize uint64
	NewSize     uint64
}

func (obj ExtendAccountEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Account` param:
	err = encoder.Encode(obj.Account)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `CurrentSize` param:
	err = encoder.Encode(obj.CurrentSize)
	if err != nil {
		return err
	}
	// Serialize `NewSize` param:
	err = encoder.Encode(obj.NewSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtendAccountEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Account`:
	err = decoder.Decode(&obj.Account)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `CurrentSize`:
	err = decoder.Decode(&obj.CurrentSize)
	if err != nil {
		return err
	}
	// Deserialize `NewSize`:
	err = decoder.Decode(&obj.NewSize)
	if err != nil {
		return err
	}
	return nil
}

type GlobalConfig struct {
	// The admin pubkey
	Admin ag_solanago.PublicKey

	// The lp fee in basis points (0.01%)
	LpFeeBasisPoints uint64

	// The protocol fee in basis points (0.01%)
	ProtocolFeeBasisPoints uint64

	// Flags to disable certain functionality
	// bit 0 - Disable create pool
	// bit 1 - Disable deposit
	// bit 2 - Disable withdraw
	// bit 3 - Disable buy
	// bit 4 - Disable sell
	DisableFlags uint8

	// Addresses of the protocol fee recipients
	ProtocolFeeRecipients [8]ag_solanago.PublicKey
}

func (obj GlobalConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `DisableFlags` param:
	err = encoder.Encode(obj.DisableFlags)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipients` param:
	err = encoder.Encode(obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `DisableFlags`:
	err = decoder.Decode(&obj.DisableFlags)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipients`:
	err = decoder.Decode(&obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

type Pool struct {
	PoolBump              uint8
	Index                 uint16
	Creator               ag_solanago.PublicKey
	BaseMint              ag_solanago.PublicKey
	QuoteMint             ag_solanago.PublicKey
	LpMint                ag_solanago.PublicKey
	PoolBaseTokenAccount  ag_solanago.PublicKey
	PoolQuoteTokenAccount ag_solanago.PublicKey

	// True circulating supply without burns and lock-ups
	LpSupply uint64
}

func (obj Pool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolBump` param:
	err = encoder.Encode(obj.PoolBump)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenAccount` param:
	err = encoder.Encode(obj.PoolBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenAccount` param:
	err = encoder.Encode(obj.PoolQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `LpSupply` param:
	err = encoder.Encode(obj.LpSupply)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolBump`:
	err = decoder.Decode(&obj.PoolBump)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenAccount`:
	err = decoder.Decode(&obj.PoolBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenAccount`:
	err = decoder.Decode(&obj.PoolQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `LpSupply`:
	err = decoder.Decode(&obj.LpSupply)
	if err != nil {
		return err
	}
	return nil
}

type SellEvent struct {
	Timestamp                        int64
	BaseAmountIn                     uint64
	MinQuoteAmountOut                uint64
	UserBaseTokenReserves            uint64
	UserQuoteTokenReserves           uint64
	PoolBaseTokenReserves            uint64
	PoolQuoteTokenReserves           uint64
	QuoteAmountOut                   uint64
	LpFeeBasisPoints                 uint64
	LpFee                            uint64
	ProtocolFeeBasisPoints           uint64
	ProtocolFee                      uint64
	QuoteAmountOutWithoutLpFee       uint64
	UserQuoteAmountOut               uint64
	Pool                             ag_solanago.PublicKey
	User                             ag_solanago.PublicKey
	UserBaseTokenAccount             ag_solanago.PublicKey
	UserQuoteTokenAccount            ag_solanago.PublicKey
	ProtocolFeeRecipient             ag_solanago.PublicKey
	ProtocolFeeRecipientTokenAccount ag_solanago.PublicKey
}

func (obj SellEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteAmountOut` param:
	err = encoder.Encode(obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenReserves` param:
	err = encoder.Encode(obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenReserves` param:
	err = encoder.Encode(obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenReserves` param:
	err = encoder.Encode(obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenReserves` param:
	err = encoder.Encode(obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountOut` param:
	err = encoder.Encode(obj.QuoteAmountOut)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `LpFee` param:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountOutWithoutLpFee` param:
	err = encoder.Encode(obj.QuoteAmountOutWithoutLpFee)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteAmountOut` param:
	err = encoder.Encode(obj.UserQuoteAmountOut)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenAccount` param:
	err = encoder.Encode(obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenAccount` param:
	err = encoder.Encode(obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipient` param:
	err = encoder.Encode(obj.ProtocolFeeRecipient)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipientTokenAccount` param:
	err = encoder.Encode(obj.ProtocolFeeRecipientTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SellEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteAmountOut`:
	err = decoder.Decode(&obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenReserves`:
	err = decoder.Decode(&obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenReserves`:
	err = decoder.Decode(&obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenReserves`:
	err = decoder.Decode(&obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenReserves`:
	err = decoder.Decode(&obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountOut`:
	err = decoder.Decode(&obj.QuoteAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountOutWithoutLpFee`:
	err = decoder.Decode(&obj.QuoteAmountOutWithoutLpFee)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteAmountOut`:
	err = decoder.Decode(&obj.UserQuoteAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenAccount`:
	err = decoder.Decode(&obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenAccount`:
	err = decoder.Decode(&obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipient`:
	err = decoder.Decode(&obj.ProtocolFeeRecipient)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipientTokenAccount`:
	err = decoder.Decode(&obj.ProtocolFeeRecipientTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

type UpdateAdminEvent struct {
	Timestamp int64
	Admin     ag_solanago.PublicKey
	NewAdmin  ag_solanago.PublicKey
}

func (obj UpdateAdminEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateAdminEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

type UpdateFeeConfigEvent struct {
	Timestamp              int64
	Admin                  ag_solanago.PublicKey
	LpFeeBasisPoints       uint64
	ProtocolFeeBasisPoints uint64
	ProtocolFeeRecipients  [8]ag_solanago.PublicKey
}

func (obj UpdateFeeConfigEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipients` param:
	err = encoder.Encode(obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateFeeConfigEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipients`:
	err = decoder.Decode(&obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawEvent struct {
	Timestamp              int64
	LpTokenAmountIn        uint64
	MinBaseAmountOut       uint64
	MinQuoteAmountOut      uint64
	UserBaseTokenReserves  uint64
	UserQuoteTokenReserves uint64
	PoolBaseTokenReserves  uint64
	PoolQuoteTokenReserves uint64
	BaseAmountOut          uint64
	QuoteAmountOut         uint64
	LpMintSupply           uint64
	Pool                   ag_solanago.PublicKey
	User                   ag_solanago.PublicKey
	UserBaseTokenAccount   ag_solanago.PublicKey
	UserQuoteTokenAccount  ag_solanago.PublicKey
	UserPoolTokenAccount   ag_solanago.PublicKey
}

func (obj WithdrawEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `LpTokenAmountIn` param:
	err = encoder.Encode(obj.LpTokenAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinBaseAmountOut` param:
	err = encoder.Encode(obj.MinBaseAmountOut)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteAmountOut` param:
	err = encoder.Encode(obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenReserves` param:
	err = encoder.Encode(obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenReserves` param:
	err = encoder.Encode(obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenReserves` param:
	err = encoder.Encode(obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenReserves` param:
	err = encoder.Encode(obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountOut` param:
	err = encoder.Encode(obj.BaseAmountOut)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountOut` param:
	err = encoder.Encode(obj.QuoteAmountOut)
	if err != nil {
		return err
	}
	// Serialize `LpMintSupply` param:
	err = encoder.Encode(obj.LpMintSupply)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserBaseTokenAccount` param:
	err = encoder.Encode(obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserQuoteTokenAccount` param:
	err = encoder.Encode(obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserPoolTokenAccount` param:
	err = encoder.Encode(obj.UserPoolTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `LpTokenAmountIn`:
	err = decoder.Decode(&obj.LpTokenAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseAmountOut`:
	err = decoder.Decode(&obj.MinBaseAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteAmountOut`:
	err = decoder.Decode(&obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenReserves`:
	err = decoder.Decode(&obj.UserBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenReserves`:
	err = decoder.Decode(&obj.UserQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenReserves`:
	err = decoder.Decode(&obj.PoolBaseTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenReserves`:
	err = decoder.Decode(&obj.PoolQuoteTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountOut`:
	err = decoder.Decode(&obj.BaseAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountOut`:
	err = decoder.Decode(&obj.QuoteAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `LpMintSupply`:
	err = decoder.Decode(&obj.LpMintSupply)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserBaseTokenAccount`:
	err = decoder.Decode(&obj.UserBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserQuoteTokenAccount`:
	err = decoder.Decode(&obj.UserQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserPoolTokenAccount`:
	err = decoder.Decode(&obj.UserPoolTokenAccount)
	if err != nil {
		return err
	}
	return nil
}
